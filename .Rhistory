#── Name gene here ─────────────────────────
graph_title <- 'SOX2'
csv.file <- 'test_SOX2.csv'
#── Upload data set and delete unneeded information ─────────────────────────
# Note that the qTower program is giving European csv standards (columns separated by ; and decimals as ,)
dataset <- read.csv(csv.file ,
skip = 19,  sep = ';', dec = ',')
dataset[dataset == "" | dataset == " "] <- NA
dataset <- subset(dataset, select = -c(Well, X, Conc..Std., Mean.Conc., Std.Dev..Mean.Conc.))
dataset
#── Attaching packages ───────────────────────────────────────
library(growthcurver)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggprism)
#── Name gene here ─────────────────────────
graph_title <- 'SOX2'
csv.file <- 'test_SOX2.csv'
#── Upload data set and delete unneeded information ─────────────────────────
# Note that the qTower program is giving European csv standards (columns separated by ; and decimals as ,)
dataset <- read.csv(csv.file ,
skip = 19,  sep = ';', dec = ',')
dataset[dataset == "" | dataset == " "] <- NA
dataset <- subset(dataset, select = -c(Well, X, Conc..Std., Mean.Conc., Std.Dev..Mean.Conc.))
dataset
#── Filter and plot all data related to the gene of interest  ─────────────────────────
results_gene <- dataset %>% filter(!is.na(Gene))
results_gene
ggplot(results_gene,
aes(x=Sample.name, y=Mean.Ct)) +
geom_point() +
geom_errorbar(aes(ymin=Mean.Ct-Std.Dev..Ct, ymax=Mean.Ct+Std.Dev..Ct), width=.2,
position=position_dodge(0.05))
#── Check NTCs ─────────────────────────
NTC <- filter(results_gene, results_gene$`Sample.type` =="NTC")
NTC
#── Based on the graph, select dilutions that fit the standard curve and because the qTower program is shit I had to add the dilution concentrations by hand
results <- results_gene %>% filter(Sample.name%in% c("Std01", "Std02","Std03", "Std04","Std05", "Std06", "Std07", "Std08"))
dataframe <- results %>% mutate(Dilution = c(1e+00, 1e-01, 1e-02, 1e-03, 1e-04, 1e-05, 1e-06, 1e-07, 1e+00, 1e-01, 1e-02, 1e-03, 1e-04, 1e-05, 1e-06, 1e-07, 1e+00, 1e-01, 1e-02, 1e-03, 1e-04, 1e-05, 1e-06, 1e-07))
dataframe
#── Adding a linear regression
g <- ggplot(dataframe,
aes(x = Dilution , y = Mean.Ct)) +
geom_point() +
geom_errorbar(aes(ymin=Mean.Ct-Std.Dev..Ct, ymax=Mean.Ct+Std.Dev..Ct), width=.2,
position=position_dodge(0.05)) +
scale_x_continuous(trans = 'log10') +
stat_smooth(method = "lm",
geom = "smooth")
#── Getting linear regression parameters
regression_mean <- lm(Mean.Ct ~ log10(Dilution) , data = dataframe)
summary(regression_mean)
#──  Calculate the efficiency
intercept <- as.numeric(regression_mean$coefficients[1])
slope <- as.numeric(regression_mean$coefficients[2])
#──  Calculate 2 predicted Ct values
# Ct_mean = slope*(log(Qty)) + intercept
y1=slope*log10(dataframe$Dilution[1]) + intercept
y2=slope*log10(dataframe$Dilution[5]) + intercept
dCt=y2 - y1
dlogCN= log10(dataframe$Dilution[5]) - log10(dataframe$Dilution[1])
ratio = dCt/dlogCN ## this is the slope of the linear regression
efficiency = 10^(-1/slope)
efficiency
efficiency_percentage = efficiency * 100 / 2
efficiency_percentage
###── Plotting everything
label_efficiency <- "Efficiency: "
label_efficiency <- paste0(label_efficiency, as.character(format(efficiency, digit=4)))
label_efficiency_percentage <- "Efficiency: "
label_efficiency_percentage <- paste0(label_efficiency_percentage, as.character(format(efficiency_percentage, digit=4)), "%")
label_r<-"R-squared: "
label_r <- paste0(label_r, as.character(format(summary(regression_mean)$r.squared), digit=3))
label_slope<-"Slope: "
label_slope <- paste0(label_slope, as.character(format(ratio, digit=4)))
g_SOX2 <- ggplot(dataframe,
aes(x = Dilution , y = Mean.Ct)) +
labs(title= graph_title) +
geom_point(color = "black",  size = 2) +
geom_errorbar(aes(ymin=Mean.Ct-Std.Dev..Ct, ymax=Mean.Ct+Std.Dev..Ct), width=.2,
position=position_dodge(0.05), color = "gray") +
theme_prism(base_size = 14)  +
theme(aspect.ratio = 0.8) +
scale_shape_prism() +
scale_x_continuous(trans = 'log10') +
stat_smooth(method = "lm",
geom = "smooth", color = "red") +
annotate("text", x = 0.06, y = 28, label = label_r) +
annotate("text", x = 0.06, y = 30, label = label_slope) +
annotate("text", x = 0.06, y = 26, label = label_efficiency) +
annotate("text", x = 0.06, y = 24, label = label_efficiency_percentage)
g_SOX2
#── Name gene here ─────────────────────────
graph_title <- 'SOX2'
csv.file <- '20230303_SOX2.csv'
#── Upload data set and delete unneeded information ─────────────────────────
# Note that the qTower program is giving European csv standards (columns separated by ; and decimals as ,)
dataset <- read.csv(csv.file ,
skip = 19,  sep = ';', dec = ',')
dataset[dataset == "" | dataset == " "] <- NA
dataset <- subset(dataset, select = -c(Well, X, Conc..Std., Mean.Conc., Std.Dev..Mean.Conc.))
dataset
#── Upload data set and delete unneeded information ─────────────────────────
# Note that the qTower program is giving European csv standards (columns separated by ; and decimals as ,)
dataset <- read.csv(csv.file ,
skip = 19,  sep = ';', dec = ',')
dataset[dataset == "" | dataset == " "] <- NA
dataset <- subset(dataset, select = -c(Well, X,  Mean.Conc., Std.Dev..Mean.Conc.))
dataset
#── Filter and plot all data related to the gene of interest  ─────────────────────────
results_gene <- dataset %>% filter(!is.na(Gene))
#── Name gene here ─────────────────────────
graph_title <- 'SOX2'
csv.file <- '20230303_SOX2.csv'
#── Upload data set and delete unneeded information ─────────────────────────
# Note that the qTower program is giving European csv standards (columns separated by ; and decimals as ,)
dataset <- read.csv(csv.file ,
skip = 19,  sep = ';', dec = ',')
dataset[dataset == "" | dataset == " "] <- NA
dataset <- subset(dataset, select = -c(Well, X, Mean.Conc., Std.Dev..Mean.Conc.))
dataset
#── Filter and plot all data related to the gene of interest  ─────────────────────────
results_gene <- dataset %>% filter(!is.na(Gene))
